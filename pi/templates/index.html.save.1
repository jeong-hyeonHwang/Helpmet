<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>HELPMET Streaming</title>
  <style>
    body { margin: 0; background: #000; width:100vw; height: 100vh; }
    video { width: 100%; object-fit: contain; }
  </style>
</head>
<body>
  <video id="video" autoplay playsinline muted></video>
  <script>
  const video = document.getElementById("video");

  let ws = null;
  let pc = null;

  
  function setupWebSocket() {
    const wsUrl = `${location.protocol === 'https:' ? 'wss' : 'ws'}://${location.host}/ws`;
    ws = new WebSocket(wsUrl);

    ws.onmessage = (event) => {
      const data = JSON.parse(event.data);
      console.log("WS 메시지 수신:", data);
    };

    ws.onclose = () => {

      setTimeout(setupWebSocket, 5000);
    };
  }

  async function setupWebRTC() {
    pc = new RTCPeerConnection();
    pc.addTransceiver("video", { direction: "recvonly" });

    pc.ontrack = (event) => {
        video.srcObject = event.streams[0];
  	video.play()
    };

    pc.onconnectionstatechange = () => {
      if (pc.connectionState === "failed" || pc.connectionState === "disconnected") {
        cleanup();
        reconnectPending = true;
      }
    };

    const offer = await pc.createOffer();
    await pc.setLocalDescription(offer);
    const res = await fetch("/offer", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        sdp: pc.localDescription.sdp,
        type: pc.localDescription.type
      })
    });
    const answer = await res.json();
    await pc.setRemoteDescription(answer);
  }

  safeStart();

</script>

</body>
</html>
